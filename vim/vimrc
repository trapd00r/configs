"!/home/scp1/bin/wim --remote-wait-silent vimsy
" vim: fdm=marker:fmr="<,">:fen:et:sw=2:smc=80:
"
" ${VIMRUNTIME}/vimrc
"   ‗‗‗‗‗‗‗‗‗‗‗‗ ‗‗‗‗‗‗ ‗‗‗‗‗‗‗‗ ‗‗‗‗‗‗‗‗‗‗‗
"         owner  Magnus Woldrich <m@japh.se>
"         btime  2009-04-24
"         mtime  2016-09-14 12:37:43
"         perms  You are free to use things you may find useful here.
"                Would my tweaks happen to give you a raise or fetch you a
"                girlfriend, it goes without saying I'm counting on you
"                to share with me as I've shared with you.
"           git  http://github.com/trapd00r/configs/vim  (up-to-date)
"           url  http://devel.japh.se/configs/vim        (sync 1/24h)
"           irc  japh@freenode #vim #zsh #perl
"   ‗‗‗‗‗‗‗‗‗‗‗‗ ‗‗‗‗‗‗‗‗‗‗‗‗‗ ‗‗‗‗ ‗‗‗‗ ‗‗‗‗
"

set all&
set nocp
set exrc
filetype plugin indent on

syntax on

"set nors                                  " This might not be needed, but these
"set t_ti=                                 " has the same effect as disabling
"set t_te=                                 " the alternate screen buffer.


set path+='/home/scp1/dev/air8/cgi-bin/core/lib/'
set path+='/home/scp1/dev/air8/'

set autoread
set autochdir
set autoindent

let &rtp = $VIMRUNTIME

let &termencoding = &encoding

set backspace=start,indent,eol
set cmdheight=2 " try to avoid 'Press ENTER to continue' prompts
set clipboard=unnamedplus,autoselect
set complete=.,w,b,u,t,i,d,k,kspell
set cindent
set cinoptions=:0,l1,t0,g0,(0
set cinwords=if,else,elsif,while,do,for,foreach,given,when,switch,case

if &ft != 'man' || &ft != 'help'
  "set colorcolumn=+1
  set colorcolumn=81
  execute "set colorcolumn=" . join(range(81,335), ',')
endif

set completeopt+=menuone
set cursorline
set define=[^A-Za-z_]
set diffopt=filler,iwhite,context:2,vertical
set display+=lastline,uhex
set expandtab
set fileencodings=utf-8,latin1
"< folding
"set fillchars=num:\ ,fold:\ ,stl:\ ,stlnc:\ ,diff:\ ,vert:▌
set fillchars+=fold:\ 
set foldcolumn=2
set foldenable
"set foldclose=all
set foldlevel=0
set foldlevelstart=1
set foldmarker=#<,#>
set foldmethod=marker
set foldminlines=2
set foldnestmax=4
set foldopen=block,hor,jump,mark,percent,quickfix,search,tag,undo
fun! Foldtext()
  let line = getline(v:foldstart)
  let sub  = substitute(line, '\v^["#!][<]\s+', '', 'g')
  "let v:folddashes="➤〚◘⭔➳❋✘ ➳   ↴⤵⇵⤵⬎჻"
  "let v:folddashes="➤⇵〚◘⭔❋✘   ⇲ ⬎ ⇲ ↴➳➳⤵⇵⤵჻"
  let v:folddashes="▌⇆ "

"  return v:folddashes . sub . ' ' . v:foldstart . ', ' . v:foldend
"  return v:folddashes . sub . ' ' . v:foldend
  return v:folddashes . sub . ' '
endfun
set foldtext=Foldtext()
">
set formatoptions=tcrqln1
set guiheadroom=0
set grepprg=internal
"set grepprg='grep\ -Im400\ --line-buffered\ -P | argdo try | grepadd! mplayer % | catch /E480:/ | endtry'

"set grepprg=ack\ -a
set guioptions-=m
set guioptions-=T
set helpfile=/home/scp1/dev/vim/runtime/doc/help.txt
set helpheight=5
set helplang=en,sv,de
set hidden
set history=50
set hlsearch
set ignorecase
set include=\\<\\(use\\\|require\\)\\>
set includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
set incsearch
set isfname+=:
set laststatus=2
set lazyredraw
set list
"set   listchars=eol:↵,tab:➤,trail:⬚,nbsp:Ɀ,precedes:↞,extends:⇥sbr=↪:conceal=⌦
set   listchars=eol:\ 
set   listchars+=tab:»\ 
set   listchars+=tab:\ \ 
set   listchars+=trail:·
set   listchars+=nbsp: 
set   listchars+=precedes: 
set   listchars+=extends: 
set   listchars+=conceal:⌦
set   showbreak=↪

set   magic
"set   makeprg=mymake
set   maxmapdepth=500
set   matchpairs+==:;
set   matchpairs+=<:>
set   matchtime=20
set   maxfuncdepth=1000
set   maxmemtot=200000
set   modeline
set   modelines=2
set modelineexpr
set nobackup
set nocscopeverbose
set noequalalways
set noerrorbells
set nostartofline
set noswapfile
set nowritebackup
set nowrap
set nrformats=alpha,hex
set numberwidth=2
set pastetoggle=<F42>
set preserveindent

set printoptions=paper:A4,syntax:n,wrap:y,header:0,number:n,duplex:off
set printoptions+=left:2,right:2,top:2,bottom:2
set printfont=-windows-montecarlo-medium-r-normal--11-110-72-72-c-60-microsoft-cp1252
set printmbfont=r:-windows-montecarlo-medium-r-normal--11-110-72-72-c-60-microsoft-cp1252
set printmbfont+=b:-windows-montecarlo-bold-r-normal--11-110-72-72-c-60-microsoft-cp1252
set printmbfont+=i:-windows-montecarlo-medium-r-normal--11-110-72-72-c-60-microsoft-cp1252

set pumheight=10
set relativenumber number
set report=0
set ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)

set scrolloff=40
set ssop=buffers,folds,globals,help,localoptions,options,resize
set shiftwidth=2
set shortmess=aIoOT
set showcmd
set showmatch
"set showmode
set smartcase
set smarttab
set splitbelow
set suffixes=~,.swp,swo,o,gz
set synmaxcol=120
set tabpagemax=4
set tabstop=2
set t_Co=256
set timeout
set timeoutlen=3000
set ttimeoutlen=50
set textwidth=80
set title
set ttyfast
set undofile
set undolevels=1024
set undodir=~/var/vim/undo
set visualbell t_vb=
set viminfo=h,'100,\"100,:20,%,n~/var/vim/viminfo
"set viminfo='100,<50,s10,h,%
set virtualedit=block
set wildchar=<Tab>
set wildmode=list:longest,full
set wildignore=*.swp,*.bak,*~,blib,*.o,*.png,*.jpe?g,.git,.svn,*.so,.hg
"set winfixwidth
"set winfixheight
"set winwidth=88
"set winminwidth=88
set whichwrap=b,s,h,l,<,>

set nomore
set updatetime=100

set term=rxvt-unicode-256color
" force an update of the statusline
let &ro =&ro

syntax on
setlocal nospell spelllang=en_us

""" are we in a VC?
if $TERM == 'linux'
  let &t_Co = 8
  color peachpuff
  set nolist
  set colorcolumn+=81

  hi CursorLine term=none  cterm=bold ctermbg=0
  hi! link CursorColumn CursorLine
  hi! link ColorColumn  CursorLine
else
"  color neverland-ansi-two
endif

"< That was some of the options, now we can start with the rest of the vimrc.
" I want to keep &rtp as short as I can, so I'm no longer loading these files
" dynamicly.
hi Normal ctermfg=225 ctermbg=232
source /home/scp1/etc/vim/nancy/000-ft.vim           " ftdetect
source /home/scp1/etc/vim/nancy/000-functions.vim    " functions
source /home/scp1/etc/vim/nancy/001-commands.vim     " user-defined commands
source /home/scp1/etc/vim/nancy/009-abbrev.vim       " my wordlist of abbrevations
source /home/scp1/etc/vim/nancy/020-mappings.vim     " o de e mapity mupp, mappity mupp
"color neverland-ansi_bg
color neverland
source /home/scp1/etc/vim/nancy/090-syntax.vim       " my syntax defs
source /home/scp1/etc/vim/nancy/099-status.vim       " status, man
">
let &t_SI = "\<Esc>]12;#ff5f00\x7"
let &t_EI = "\<Esc>]12;#ff0000\x7"


"filetype plugin indent on


"syn match visualLast /\%V.*\%V/
"hi visualLast ctermbg=100 cterm=bolditalic
" XXX NOTE TODO PLEASEFIX {{{
" command! -nargs=1 -complete=color colorbuffer
"   \   color <args>
"   \ | let b:colors_name = g:colors_name
"
" command! -nargs=1 -complete=color colordefault
"   \ let s:colors_name = <q-args>
"   \ | if !exists('b:colors_name')
"     \ | colors <args>
"     \ | endif
" if !exists('g:colors_name')
"   let g:colors_name = 'default'
" endif
"
" let s:colors_name = g:colors_name
" au BufEnter *
" \ let s:new_colors =
" \   (exists('b:colors_name')
" \     ? (b:colors_name)
" \     : (s:colors_name))
" \   | if s:new_colors != g:colors_name |
" \      exe 'colors' s:new_colors
" \   | endif
" }}}

"hi perlVarPlain ctermfg=10 cterm=none
"hi perlMethod   ctermfg=10 cterm=bold


" vidir
"autocmd BufRead * normal! gg6|0G"ad
"

":autocmd BufRead  vidir normal! gg6|0G"ad
":autocmd BufWrite vidir normal! gg0"aP
"autocmd BufWrite vidir normal! ggdG

let &t_Cs = "\e[4:3m"
let &t_Ce = "\e[4:0m"
hi SpellBad     gui=undercurl guisp=red term=undercurl cterm=undercurl
if &ft == 'python'
  hi link pythonFunction Keyword
endif


"""""""       """""""""
""""""" Askås """""""""
"""""""       """""""""

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif


set cc&

set encoding=utf-8
au BufRead,BufNewFile /home/scp1/dev/askas/air8/* setlocal fileencodings=iso-8859-1 fileencoding=iso-8859-1
au BufRead,BufNewFile /home/scp1/dev/askas/* setlocal cc&
au BufRead,BufNewFile /home/scp1/dev/askas/* setlocal synmaxcol&

let g:fullpath=expand('%:p')
au BufEnter * let fullpath=expand('%:p')
au BufRead,BufNewFile,BufEnter /home/scp1/dev/askas/* let &makeprg = 'publish_vimmake ' .. g:fullpath
au BufRead,BufNewFile,BufEnter /home/scp1/dev/askas/air8 setlocal noexpandtab
au BufRead,BufNewFile *.md set ft=markdown nospell

nmap <C-b> :make<CR>

"set noexpandtab
set guifont=Source\ Code\ Pro\ 12

hi markdownXmlElement      ctermfg=12
hi markdownXmlEmptyElement ctermfg=37
hi comma                   ctermfg=87 cterm=bolditalic


"fun! ShowFuncName()
"  let lnum = line(".")
"  let col = col(".")
"  echohl ModeMsg
"  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
"  echohl None
"  call search("\\%" . lnum . "l" . "\\%" . col . "c")
"endfun
"nnoremap <C-s> :call ShowFuncName()<CR>


syn match commentblock /\v[#]{80}/
hi commentblock ctermfg=220


set showtabline=0


" highlight filetypes like my LS_COLORS
hi clear NERDTreeExecFile
" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, attr)
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermfg='. a:fg .' cterm='. a:attr
endfunction

call NERDTreeHighlightFile('pm',    '203', 'none')
call NERDTreeHighlightFile('pl',    '208', 'none')
call NERDTreeHighlightFile('css',   '125', 'bold')
call NERDTreeHighlightFile('js',    '74',  'bold')
call NERDTreeHighlightFile('txt',   '188', 'bolditalic')
call NERDTreeHighlightFile('png',   '197', 'none')
call NERDTreeHighlightFile('jpg',   '123', 'none')
call NERDTreeHighlightFile('php',   '81',  'none')
call NERDTreeHighlightFile('md',    '220', 'bold')
call NERDTreeHighlightFile('html',  '125', 'italic')
call NERDTreeHighlightFile('shtml', '125', 'italic')

hi NERDTreeDir      ctermfg=30 cterm=none
hi NERDTreeDirSlash ctermfg=30 cterm=none
hi NERDTreeOpenable ctermfg=30 cterm=none
hi NERDTreeClosable ctermfg=30 cterm=italic
hi NERDTreeUp       ctermfg=30 cterm=none
hi NERDTreeCWD      ctermfg=220 cterm=bold
"hi NERDTreeBookmarkName ctermfg=
hi VertSplit        ctermfg=234 ctermbg=233 cterm=none

"nnoremap <C-m> :NERDTreeToggle<CR>
"
" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | wincmd w | endif


let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[.]git$|test[/]|_VERKTYG|docs[/]',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
	\ }

"let g:ctrlp_user_command = 'find %s -type f | grep -vP "test[/]|_VERKTYG|docs[/]"'

if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
else
  let g:ctrlp_clear_cache_on_exit = 0
endif

let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_by_filename = 1

let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1


nnoremap <C-o> :CtrlPFunky<cr>


hi CtrlPMatch ctermfg=196 cterm=bold

set   listchars+=tab:»\ 


"let g:rg_command = 'rg --vimgrep  '
"nnoremap <C-g> :exe ":Rg " . escape(expand("<cWORD>"), ";")

" add : to iskeyword to modify vims concept of a word.
" that way we can grab entire perl module declarations for example:
" use Foo::Bar::Baz::Laleh;
set iskeyword+=:
nnoremap  <silent> <C-g> :Rg <C-R><C-W><CR>

